// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  hashedPassword String?
  role           String    @default("AGENT")
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  permissions         Permission[]
  managedBy           String?
  manager             User?                @relation("ManagerToUser", fields: [managedBy], references: [id])
  managedUsers        User[]               @relation("ManagerToUser")
  teamLeader          User?                @relation("TeamLeaderToAgent", fields: [teamLeaderId], references: [id])
  teamLeaderId        String?
  agents              User[]               @relation("TeamLeaderToAgent")
  agentProfile        Agent?
  teamLeaderProfile   TeamLeader?
  managerProfile      Manager?
  sessionsAsAgent     CoachingSession[]    @relation("AgentSessions")
  sessionsAsTeamLeader CoachingSession[]   @relation("TeamLeaderSessions")
  agentMetrics        AgentMetric[]
  
  // V2 Relations
  agentQuickNotes     QuickNote[]          @relation("AgentQuickNotes")
  authoredQuickNotes  QuickNote[]          @relation("AuthorQuickNotes")
  agentActionItems    ActionItem[]         @relation("AgentActionItems")
  createdActionItems  ActionItem[]         @relation("CreatorActionItems")
  assignedActionItems ActionItem[]         @relation("AssigneeActionItems")
  agentActionPlans    ActionPlan[]         @relation("AgentActionPlans")
  createdActionPlans  ActionPlan[]         @relation("CreatorActionPlans")
  approvedActionPlans ActionPlan[]         @relation("ApproverActionPlans")
  preferences         UserPreferences?

  @@index([email])
  @@index([role])
  @@index([managedBy])
  @@index([teamLeaderId])
}

model UserPreferences {
  id                 String    @id @default(cuid())
  userId             String    @unique
  twoFactorEnabled   Boolean   @default(false)
  sessionTimeout     Int       @default(30) // in minutes
  loginNotifications Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  resource    String
  action      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  users       User[]
  roles       RolePermission[]

  @@unique([resource, action])
  @@index([resource])
}

model RolePermission {
  id           String     @id @default(cuid())
  role         String
  permissionId String
  createdAt    DateTime   @default(now())

  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([role, permissionId])
  @@index([role])
}

model Manager {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}

model TeamLeader {
  id         String   @id @default(cuid())
  userId     String   @unique
  department String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
}

model Agent {
  id         String   @id @default(cuid())
  userId     String   @unique
  employeeId String   @unique
  department String?
  hireDate   DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])

  @@index([employeeId])
}

model Performance {
  id         String   @id @default(cuid())
  agentId    String
  metricType String
  score      Float
  target     Float
  period     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([agentId, metricType, period])
  @@index([agentId, period])
}

model CoachingSession {
  id               String    @id @default(cuid())
  agentId          String
  teamLeaderId     String
  sessionDate      DateTime
  scheduledDate    DateTime
  status           String    @default("SCHEDULED")
  previousScore    Float?
  currentScore     Float?
  preparationNotes String?   
  sessionNotes     String?   
  actionItems      String?   
  followUpDate     DateTime?
  duration         Int       @default(60)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  agent            User              @relation("AgentSessions", fields: [agentId], references: [id])
  teamLeader       User              @relation("TeamLeaderSessions", fields: [teamLeaderId], references: [id])
  sessionMetrics   SessionMetric[]
  actionItemsV2    ActionItem[]

  @@index([agentId, status])
  @@index([teamLeaderId, status])
  @@index([scheduledDate])
}

model SessionMetric {
  id         String   @id @default(cuid())
  sessionId  String
  metricName String
  score      Float
  comments   String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  session    CoachingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, metricName])
}

model AgentMetric {
  id                  String    @id @default(cuid())
  agentId             String
  month               Int
  year                Int
  
  // New metric names and calculated percentages
  scheduleAdherence   Float?    // (Actual hours / Scheduled hours) × 100
  attendanceRate      Float?    // (Days present / Total scheduled days) × 100
  punctualityScore    Float?    // (On-time arrivals / Total shifts) × 100
  breakCompliance     Float?    // (Breaks within limit / Total breaks) × 100
  taskCompletionRate  Float?    // (Tasks completed / Tasks assigned) × 100
  productivityIndex   Float?    // (Actual output / Expected output) × 100
  qualityScore        Float?    // (Error-free tasks / Total tasks) × 100
  efficiencyRate      Float?    // (Standard time / Actual time taken) × 100
  
  // Raw data fields for calculations
  scheduledHours      Float?
  actualHours         Float?
  scheduledDays       Int?
  daysPresent         Int?
  totalShifts         Int?
  onTimeArrivals      Int?
  totalBreaks         Int?
  breaksWithinLimit   Int?
  tasksAssigned       Int?
  tasksCompleted      Int?
  expectedOutput      Float?
  actualOutput        Float?
  totalTasks          Int?
  errorFreeTasks      Int?
  standardTime        Float?
  actualTimeSpent     Float?
  
  // New weights based on impact levels
  scheduleAdherenceWeight   Float     @default(1.0)   // Medium Impact
  attendanceRateWeight      Float     @default(0.5)   // Low Impact
  punctualityScoreWeight    Float     @default(0.5)   // Low Impact
  breakComplianceWeight     Float     @default(0.5)   // Low Impact
  taskCompletionRateWeight  Float     @default(1.5)   // High Impact
  productivityIndexWeight   Float     @default(1.5)   // High Impact
  qualityScoreWeight        Float     @default(1.5)   // High Impact
  efficiencyRateWeight      Float     @default(1.0)   // Medium Impact
  
  // Legacy fields for backward compatibility (deprecated)
  service             Float?
  productivity        Float?
  quality             Float?
  assiduity           Float?
  performance         Float?
  adherence           Float?
  lateness            Float?
  breakExceeds        Float?
  serviceWeight       Float?
  productivityWeight  Float?
  qualityWeight       Float?
  assiduityWeight     Float?
  performanceWeight   Float?
  adherenceWeight     Float?
  latenessWeight      Float?
  breakExceedsWeight  Float?
  
  totalScore          Float?
  percentage          Float?
  notes               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  agent               User      @relation(fields: [agentId], references: [id])

  @@unique([agentId, month, year], name: "agentId_month_year")
}

model MetricWeight {
  id                  String    @id @default(cuid())
  serviceWeight       Float     @default(1.0)
  productivityWeight  Float     @default(1.0)
  qualityWeight       Float     @default(1.0)
  assiduityWeight     Float     @default(1.0)
  performanceWeight   Float     @default(1.0)
  adherenceWeight     Float     @default(1.0)
  latenessWeight      Float     @default(1.0)
  breakExceedsWeight  Float     @default(1.0)
  isDefault           Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

// V2 New Models

model QuickNote {
  id          String   @id @default(cuid())
  agentId     String
  authorId    String
  content     String   
  category    String   // PERFORMANCE, BEHAVIOR, TRAINING, OTHER
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  agent       User     @relation("AgentQuickNotes", fields: [agentId], references: [id])
  author      User     @relation("AuthorQuickNotes", fields: [authorId], references: [id])
  
  @@index([agentId, createdAt])
  @@index([authorId])
  @@index([category])
}

model ActionItem {
  id              String    @id @default(cuid())
  agentId         String
  sessionId       String?
  title           String
  description     String    
  priority        String    // HIGH, MEDIUM, LOW
  status          String    @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  dueDate         DateTime
  completedDate   DateTime?
  createdBy       String
  assignedTo      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  agent           User      @relation("AgentActionItems", fields: [agentId], references: [id])
  session         CoachingSession? @relation(fields: [sessionId], references: [id])
  creator         User      @relation("CreatorActionItems", fields: [createdBy], references: [id])
  assignee        User      @relation("AssigneeActionItems", fields: [assignedTo], references: [id])
  
  @@index([agentId, status])
  @@index([dueDate])
  @@index([assignedTo, status])
}

model ActionPlan {
  id              String    @id @default(cuid())
  agentId         String
  title           String
  description     String    
  startDate       DateTime
  endDate         DateTime
  status          String    @default("DRAFT") // DRAFT, ACTIVE, COMPLETED, CANCELLED
  createdBy       String
  approvedBy      String?
  approvedAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  agent           User      @relation("AgentActionPlans", fields: [agentId], references: [id])
  creator         User      @relation("CreatorActionPlans", fields: [createdBy], references: [id])
  approver        User?     @relation("ApproverActionPlans", fields: [approvedBy], references: [id])
  items           ActionPlanItem[]
  
  @@index([agentId, status])
  @@index([startDate, endDate])
}

model ActionPlanItem {
  id              String    @id @default(cuid())
  actionPlanId    String
  title           String
  description     String    
  targetMetric    String
  targetValue     Float
  currentValue    Float?
  dueDate         DateTime
  status          String    @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  completedDate   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  actionPlan      ActionPlan @relation(fields: [actionPlanId], references: [id], onDelete: Cascade)
  
  @@index([actionPlanId, status])
  @@index([dueDate])
}

// Audit Log for tracking changes
model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  resource    String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([resource, resourceId])
  @@index([createdAt])
}

// Notification model for real-time updates
model Notification {
  id          String    @id @default(cuid())
  userId      String
  type        String
  title       String
  message     String
  data        Json?
  isRead      Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  
  @@index([userId, isRead])
  @@index([createdAt])
}
