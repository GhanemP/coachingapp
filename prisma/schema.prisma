// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole  @default(AGENT)
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isActive       Boolean   @default(true)

  accounts          Account[]
  sessions          Session[]
  managerProfile    Manager?   @relation("ManagerProfile")
  teamLeaderProfile TeamLeader? @relation("TeamLeaderProfile")
  agentProfile      Agent?      @relation("AgentProfile")
  
  // Relationships for hierarchy
  managedBy         String?     // For team leaders managed by managers
  manager           User?       @relation("ManagerTeamLeaders", fields: [managedBy], references: [id])
  teamLeaders       User[]      @relation("ManagerTeamLeaders")
  
  supervisedBy      String?     // For agents supervised by team leaders
  teamLeader        User?       @relation("TeamLeaderAgents", fields: [supervisedBy], references: [id])
  agents            User[]      @relation("TeamLeaderAgents")
  
  coachingSessions  CoachingSession[] @relation("SessionAgent")
  conductedSessions CoachingSession[] @relation("SessionTeamLeader")
  agentMetrics      AgentMetric[]     @relation("AgentMetrics")
}

model Manager {
  id        String   @id @default(cuid())
  userId    String   @unique
  department String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation("ManagerProfile", fields: [userId], references: [id], onDelete: Cascade)
}

model TeamLeader {
  id        String   @id @default(cuid())
  userId    String   @unique
  teamName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user      User     @relation("TeamLeaderProfile", fields: [userId], references: [id], onDelete: Cascade)
}

model Agent {
  id           String   @id @default(cuid())
  userId       String   @unique
  employeeId   String   @unique
  department   String
  hireDate     DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation("AgentProfile", fields: [userId], references: [id], onDelete: Cascade)
  performance  Performance[]
}

model Performance {
  id          String   @id @default(cuid())
  agentId     String
  metricType  String   // e.g., "calls_handled", "customer_satisfaction", "resolution_rate"
  score       Float    // 0-100
  period      String   // e.g., "2025-Q2", "2025-07"
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  agent       Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model CoachingSession {
  id              String         @id @default(cuid())
  agentId         String
  teamLeaderId    String
  sessionDate     DateTime
  scheduledDate   DateTime
  status          SessionStatus  @default(SCHEDULED)
  previousScore   Float?         // Agent's score from previous session
  currentScore    Float?         // New score entered during session
  preparationNotes String?       // Team leader's preparation notes
  sessionNotes    String?        // Notes taken during session
  actionItems     String?        // JSON array of action items
  followUpDate    DateTime?
  duration        Int?           // Duration in minutes
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  agent        User           @relation("SessionAgent", fields: [agentId], references: [id], onDelete: Cascade)
  teamLeader   User           @relation("SessionTeamLeader", fields: [teamLeaderId], references: [id], onDelete: Cascade)
  sessionMetrics SessionMetric[]
}

model SessionMetric {
  id              String   @id @default(cuid())
  sessionId       String
  metricName      String   // e.g., "communication_skills", "product_knowledge", "problem_solving"
  score           Float    // 0-100
  comments        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  session         CoachingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  MANAGER
  TEAM_LEADER
  AGENT
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

model AgentMetric {
  id              String   @id @default(cuid())
  agentId         String
  month           Int      // 1-12
  year            Int      // e.g., 2025
  
  // The 8 metrics (scores from 1-5)
  service         Int      @default(1)
  productivity    Int      @default(1)
  quality         Int      @default(1)
  assiduity       Int      @default(1)
  performance     Int      @default(1)
  adherence       Int      @default(1)
  lateness        Int      @default(1)
  breakExceeds    Int      @default(1)
  
  // Weights for each metric (default weights based on your example)
  serviceWeight      Float    @default(1.0)
  productivityWeight Float    @default(1.0)
  qualityWeight      Float    @default(1.0)
  assiduityWeight    Float    @default(1.0)
  performanceWeight  Float    @default(1.0)
  adherenceWeight    Float    @default(1.0)
  latenessWeight     Float    @default(1.0)
  breakExceedsWeight Float    @default(1.0)
  
  // Calculated fields
  totalScore      Float?   // Sum of (metric * weight)
  percentage      Float?   // (totalScore / maxPossibleScore) * 100
  
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  agent           User     @relation("AgentMetrics", fields: [agentId], references: [id], onDelete: Cascade)
  
  @@unique([agentId, month, year])
}