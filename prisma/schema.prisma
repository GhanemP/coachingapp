generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String            @id @default(cuid())
  name              String
  email             String            @unique
  emailVerified     DateTime?
  image             String?
  role              String            @default("AGENT")
  hashedPassword    String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isActive          Boolean           @default(true)
  managedBy         String?
  supervisedBy      String?
  accounts          Account[]
  agentProfile      Agent?            @relation("AgentProfile")
  agentMetrics      AgentMetric[]     @relation("AgentMetrics")
  conductedSessions CoachingSession[] @relation("SessionTeamLeader")
  coachingSessions  CoachingSession[] @relation("SessionAgent")
  managerProfile    Manager?          @relation("ManagerProfile")
  sessions          Session[]
  teamLeaderProfile TeamLeader?       @relation("TeamLeaderProfile")
  teamLeader        User?             @relation("TeamLeaderAgents", fields: [supervisedBy], references: [id])
  agents            User[]            @relation("TeamLeaderAgents")
  manager           User?             @relation("ManagerTeamLeaders", fields: [managedBy], references: [id])
  teamLeaders       User[]            @relation("ManagerTeamLeaders")

  @@index([role])
  @@index([isActive])
  @@index([supervisedBy])
  @@index([managedBy])
  @@index([createdAt])
}

model Manager {
  id         String   @id @default(cuid())
  userId     String   @unique
  department String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("ManagerProfile", fields: [userId], references: [id], onDelete: Cascade)
}

model TeamLeader {
  id        String   @id @default(cuid())
  userId    String   @unique
  teamName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation("TeamLeaderProfile", fields: [userId], references: [id], onDelete: Cascade)
}

model Agent {
  id          String        @id @default(cuid())
  userId      String        @unique
  employeeId  String        @unique
  department  String
  hireDate    DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation("AgentProfile", fields: [userId], references: [id], onDelete: Cascade)
  performance Performance[]
}

model Performance {
  id         String   @id @default(cuid())
  agentId    String
  metricType String
  score      Float
  period     String
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  agent      Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model CoachingSession {
  id               String          @id @default(cuid())
  agentId          String
  teamLeaderId     String
  sessionDate      DateTime
  scheduledDate    DateTime
  status           String          @default("SCHEDULED")
  previousScore    Float?
  currentScore     Float?
  preparationNotes String?
  sessionNotes     String?
  actionItems      String?
  followUpDate     DateTime?
  duration         Int?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  teamLeader       User            @relation("SessionTeamLeader", fields: [teamLeaderId], references: [id], onDelete: Cascade)
  agent            User            @relation("SessionAgent", fields: [agentId], references: [id], onDelete: Cascade)
  sessionMetrics   SessionMetric[]

  @@index([agentId])
  @@index([teamLeaderId])
  @@index([status])
  @@index([scheduledDate])
  @@index([sessionDate])
}

model SessionMetric {
  id         String          @id @default(cuid())
  sessionId  String
  metricName String
  score      Float
  comments   String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  session    CoachingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AgentMetric {
  id                 String   @id @default(cuid())
  agentId            String
  month              Int
  year               Int
  service            Int      @default(1)
  productivity       Int      @default(1)
  quality            Int      @default(1)
  assiduity          Int      @default(1)
  performance        Int      @default(1)
  adherence          Int      @default(1)
  lateness           Int      @default(1)
  breakExceeds       Int      @default(1)
  serviceWeight      Float    @default(1.0)
  productivityWeight Float    @default(1.0)
  qualityWeight      Float    @default(1.0)
  assiduityWeight    Float    @default(1.0)
  performanceWeight  Float    @default(1.0)
  adherenceWeight    Float    @default(1.0)
  latenessWeight     Float    @default(1.0)
  breakExceedsWeight Float    @default(1.0)
  totalScore         Float?
  percentage         Float?
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  agent              User     @relation("AgentMetrics", fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, month, year])
  @@index([agentId])
  @@index([year, month])
  @@index([createdAt])
}
